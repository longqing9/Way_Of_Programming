<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nyist.springmvc.dao.StudentMapper" >
  <resultMap id="BaseResultMap" type="cn.nyist.springmvc.po.Student" >
    <id column="sno" property="sno" jdbcType="BIGINT" />
    <result column="sname" property="sname" jdbcType="VARCHAR" />
    <result column="sclassid" property="sclassid" jdbcType="BIGINT" />
    <result column="ssex" property="ssex" jdbcType="CHAR" />
    <result column="college" property="college" jdbcType="VARCHAR" />
    <result column="profession" property="profession" jdbcType="VARCHAR" />
    <result column="stel" property="stel" jdbcType="VARCHAR" />
    <result column="spic" property="spic" jdbcType="VARCHAR" />
  </resultMap>
   <resultMap id="BaseResultinforMap" type="cn.nyist.springmvc.domain.Studentinfor" >
    <id column="sno" property="sno" jdbcType="BIGINT" />
    <result column="sname" property="sname" jdbcType="VARCHAR" />
    <result column="classname" property="classname" jdbcType="VARCHAR" />
    <result column="ssex" property="ssex" jdbcType="CHAR" />
    <result column="college" property="college" jdbcType="VARCHAR" />
    <result column="profession" property="profession" jdbcType="VARCHAR" />
    <result column="stel" property="stel" jdbcType="VARCHAR" />
    <result column="spic" property="spic" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    sno, sname, sclassid, ssex, college, profession, stel, spic
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.nyist.springmvc.po.StudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from student
    where sno = #{sno,jdbcType=BIGINT}
  </select>
  <select id="selectstudentinforBysno" resultMap="BaseResultinforMap" parameterType="java.lang.Long" >
    select 
    student.sno, student.sname, class.classname, student.ssex, student.college, student.profession, student.stel, student.spic
    from student,class
    where sno = #{sno,jdbcType=BIGINT} and class.classid = student.sclassid
  </select>
  <select id="selectByclassid" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from student
    where sclassid = #{sclassid,jdbcType=BIGINT}
  </select>
  
  <select id="SelectinformationByname" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from student
    where sname like "%"#{0}"%" and sclassid = #{1}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from student
    where sno = #{sno,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.nyist.springmvc.po.StudentExample" >
    delete from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.nyist.springmvc.po.Student" >
    insert into student (sno, sname, sclassid, 
      ssex, college, profession, 
      stel, spic)
    values (#{sno,jdbcType=BIGINT}, #{sname,jdbcType=VARCHAR}, #{sclassid,jdbcType=BIGINT}, 
      #{ssex,jdbcType=CHAR}, #{college,jdbcType=VARCHAR}, #{profession,jdbcType=VARCHAR}, 
      #{stel,jdbcType=VARCHAR}, #{spic,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.nyist.springmvc.po.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        sno,
      </if>
      <if test="sname != null" >
        sname,
      </if>
      <if test="sclassid != null" >
        sclassid,
      </if>
      <if test="ssex != null" >
        ssex,
      </if>
      <if test="college != null" >
        college,
      </if>
      <if test="profession != null" >
        profession,
      </if>
      <if test="stel != null" >
        stel,
      </if>
      <if test="spic != null" >
        spic,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sno != null" >
        #{sno,jdbcType=BIGINT},
      </if>
      <if test="sname != null" >
        #{sname,jdbcType=VARCHAR},
      </if>
      <if test="sclassid != null" >
        #{sclassid,jdbcType=BIGINT},
      </if>
      <if test="ssex != null" >
        #{ssex,jdbcType=CHAR},
      </if>
      <if test="college != null" >
        #{college,jdbcType=VARCHAR},
      </if>
      <if test="profession != null" >
        #{profession,jdbcType=VARCHAR},
      </if>
      <if test="stel != null" >
        #{stel,jdbcType=VARCHAR},
      </if>
      <if test="spic != null" >
        #{spic,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.nyist.springmvc.po.StudentExample" resultType="java.lang.Integer" >
    select count(*) from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student
    <set >
      <if test="record.sno != null" >
        sno = #{record.sno,jdbcType=BIGINT},
      </if>
      <if test="record.sname != null" >
        sname = #{record.sname,jdbcType=VARCHAR},
      </if>
      <if test="record.sclassid != null" >
        sclassid = #{record.sclassid,jdbcType=BIGINT},
      </if>
      <if test="record.ssex != null" >
        ssex = #{record.ssex,jdbcType=CHAR},
      </if>
      <if test="record.college != null" >
        college = #{record.college,jdbcType=VARCHAR},
      </if>
      <if test="record.profession != null" >
        profession = #{record.profession,jdbcType=VARCHAR},
      </if>
      <if test="record.stel != null" >
        stel = #{record.stel,jdbcType=VARCHAR},
      </if>
      <if test="record.spic != null" >
        spic = #{record.spic,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student
    set sno = #{record.sno,jdbcType=BIGINT},
      sname = #{record.sname,jdbcType=VARCHAR},
      sclassid = #{record.sclassid,jdbcType=BIGINT},
      ssex = #{record.ssex,jdbcType=CHAR},
      college = #{record.college,jdbcType=VARCHAR},
      profession = #{record.profession,jdbcType=VARCHAR},
      stel = #{record.stel,jdbcType=VARCHAR},
      spic = #{record.spic,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.nyist.springmvc.po.Student" >
    update student
    <set >
      <if test="sname != null" >
        sname = #{sname,jdbcType=VARCHAR},
      </if>
      <if test="sclassid != null" >
        sclassid = #{sclassid,jdbcType=BIGINT},
      </if>
      <if test="ssex != null" >
        ssex = #{ssex,jdbcType=CHAR},
      </if>
      <if test="college != null" >
        college = #{college,jdbcType=VARCHAR},
      </if>
      <if test="profession != null" >
        profession = #{profession,jdbcType=VARCHAR},
      </if>
      <if test="stel != null" >
        stel = #{stel,jdbcType=VARCHAR},
      </if>
      <if test="spic != null" >
        spic = #{spic,jdbcType=VARCHAR},
      </if>
    </set>
    where sno = #{sno,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.nyist.springmvc.po.Student" >
    update student
    set sname = #{sname,jdbcType=VARCHAR},
      sclassid = #{sclassid,jdbcType=BIGINT},
      ssex = #{ssex,jdbcType=CHAR},
      college = #{college,jdbcType=VARCHAR},
      profession = #{profession,jdbcType=VARCHAR},
      stel = #{stel,jdbcType=VARCHAR},
      spic = #{spic,jdbcType=VARCHAR}
    where sno = #{sno,jdbcType=BIGINT}
  </update>
</mapper>